* write my own blog
** TODO new blogs [1/6]
1. [X] box-sizing
2. [ ] box-shadow 学习
3. [ ] height 设值无法成功的问题
4. [ ] height vs padding （height 失效）
5. [ ] 下拉动画
6. [ ] box-shadow 阴影被覆盖 https://stackoverflow.com/questions/5505118/css-box-shadow-hidden-z-index-does-not-fix


** new blog on css <2020-09-10 四>

border/padding vs width/height

事情源自于工作上遇到的一个问题： 我想要实现一个下拉动画，但是发现遇到了一个 bug，有个下拉元素 出现了小片空白。

经过排查，发现是由 css 的 padding 属性引起的 bug。接下来先给出代码，描述问题之后，列出相关知识点，再说明解决方案。

*** box-sizing
[[https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing][MDN]]: [[https://developer.mozilla.org/en-US/docs/Web/CSS][CSS]] 中的 box-sizing 属性定义了 [[https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent][user agent]] 应该如何计算一个元素的总宽度和总高度。
在 CSS 盒子模型的默认定义里，你对一个元素所设置的 width 与 height 只会应用到这个元素的内容区。如果这个元素有任何的 border 或 padding ，
绘制到屏幕上时的盒子宽度和高度会加上设置的边框和内边距值。这意味着当你调整一个元素的宽度和高度时需要时刻注意到这个元素的边框和内边距。当我们实现响应式布局时，这个特点尤其烦人。

box-sizing 使得计算高度宽度变得简单，它有两个可赋值的属性

- content-box  是默认值。如果你设置一个元素的宽为100px，那么这个元素的内容区会有100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。
- border-box 告诉浏览器：你想要设置的边框和内边距的值是包含在width内的。也就是说，如果你将一个元素的width设为100px，那么这100px会包含它的border和padding，内容区的实际宽度是
width减去(border + padding)的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。

*** box-shadow

[[https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-shadow#shadow][MDN]]: CSS box-shadow 属性用于在元素的框架上添加阴影效果。你可以在同一个元素上设置多个阴影效果，并用逗号将他们分隔开。该属性可设置的值包括阴影的X轴偏移量、Y轴偏移量、模糊半径、扩散半径和颜色。

*** height 设值

height 设值的问题曾经多次遇到，主要表现在给某个元素设值后，然后发现效果并非像我们想象中的那样。
这个问题集中出现在 css 基础薄弱的同学身上（比如我），其实高度的问题，除了和上文中提到过的计算方法相关外，还与一开始被设值的元素的特性相关。

最常见的错误用法是，给一个非块元素（如行内元素）设高度、宽度。这是无效的操作。必须指定元素的显示属性为块，才能设置有效的高度或者宽度值。
比如，使用 display 的 inline-block/block/flex 等，都可以将非块元素转化为块元素。

块元素的典型特征是： 在文档流中每个块元素会换行，而行内元素这种是不会的。

*Link*
块元素
行内元素

*** height vs padding (height 失效)

*** nth-child , 高亮条转换特效。

*** 滑动提示样式

** new blog on html
** new blog on babel and webpack
使用 ts+vue 编写本地插件

** new blog on ts vue js

webpack ... 展开运算符错误

不是 es6!

Just install babel-plugin-transform-object-rest-spread module. https://www.npmjs.com/package/babel-plugin-transform-object-rest-spread

Then add it to .babelrc:

"plugins": [
    "babel-plugin-transform-object-rest-spread",
  ],


newwebpack No data received ERR_EMPTY_RESPONSE 错误
给 webpack-dev-server 添加 --host xxxxxxxx(设好的 host 映射，或者指定的域名)

** new blog for learning org mode
官方解释 & 简单语法：

Org mode is for keeping notes, maintaining to-do lists, planning
 projects, authoring documents, computational notebooks, literate
=programming= and +more+ — in a fast and *effective* _plain_ /text system/.

org mode 是一款为了 记笔记、维护 todo list、计划项目、编辑文档，记账，文字编程等等
设计的快速、高效的纯文本系统。


简易教程：
 * This Is A Heading
 ** This Is A Sub-Heading
 *** And A Sub-Sub-Heading

 Paragraphs are separated by at least one empty line.

 *bold* /italic/ _underlined_ +strikethrough+ =monospaced=
 [[http://Karl-Voit.at][Link description]]
 http://Karl-Voit.at → link without description

 - list item
 - another item
   - sub-item
     1. also enumerated
     2. if you like
 - [ ] yet to be done
 - [X] item which is done

 : Simple pre-formatted text such as for source code.
 : This also respects the line breaks. *bold* is not bold here.

 #+BEGIN_SRC python
 myresult = 42 * 23
 print('Hello Europe! ' + str(myresult))
 #+END_SRC'


 Prefix headings:

 # Heading 1
 ## Heading 2
 ### Heading 3

 Pre- and postfix headings:

 = Heading 1 =
 == Heading 2 ==
 === Heading 3 ===

 Underlined headings:

 Heading 1
 =========

 Heading 2
 ~~~~~~~~~

 Heading 3
 *********
* follow great programmers
1. Steve Purcell
2. Sacha Chua
3. chen_bin

* community
加入社区更上一层楼
最重要的是专一.

例如, Quora.com 上有很多有趣的话题. 请克制兴趣, 不去定阅和 Emacs 无关的话题.

Reddit
Reddit 是最好的. 能从中国大陆访问.

GitHub 是高手云集的地方
GitHub 的版本控制服务很好. 现在它的社区化倾向越来越强了, 我喜欢.

例如, 可以看一下 https://github.com/search?p=1&q=stars%3A%3E20+extension%3Ael+language%3Aelisp&ref=searchresults&type=Repositories 上最酷的 Emacs 插件.

Emacs 牛人的博客
最好的是 Planet EmacsLife, 多个 Emacs 博客的集合.

在 twitter 上以 “emacs lang:en” 定期搜索
twitter 人多, 更新结果快.

之所以加上 “lang:en” 是因为要排除日文内容, 因我不懂日文.

如果你懂日文, 则应充分利用日文资源, 其质量相当高.

也可以用 Advanced Search 搜索 (Winy Song 提供此技巧).

在 Stack Overflow 上搜索相关讨论
google “emacs-related-keywords site:stackoverflow.com”

我会定期搜索, 同一帖子反复精读. 因为讨论质量很高.

http://emacs.stackexchange.com 是 Stack Overflow 旗下专门的 Emacs 问答社区.

到 Youtube 上看 emacs 相关的视频
我就是看了 Google Tech Talks 上这个 Org-mode 作者的介绍 而爱上 org-mode.

不过 Youtube 搜索结果是最佳匹配的. 由于相关视频并不多, 如按照默认算法, 每次总是那几个. 所以如果关注最新进展, 搜索应以时间排序.





* How to improve myself
1. 学习 golang
2. 学习 eamcs
3. 学习 计算机基础
4. 加入社区
5. 贡献开源项目
